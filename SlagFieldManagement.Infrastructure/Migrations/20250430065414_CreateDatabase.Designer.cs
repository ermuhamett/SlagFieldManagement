// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SlagFieldManagement.Infrastructure;

#nullable disable

namespace SlagFieldManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250430065414_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SlagFieldManagement.Domain.Aggregates.SlagFieldPlace.SlagFieldPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enable");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("row");

                    b.HasKey("Id")
                        .HasName("pk_slag_field_places");

                    b.ToTable("SlagFieldPlaces", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Aggregates.SlagFieldState.SlagFieldState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BucketId")
                        .HasColumnType("uuid")
                        .HasColumnName("bucket_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("place_id");

                    b.Property<decimal>("SlagWeight")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("slag_weight");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_slag_field_states");

                    b.HasIndex("BucketId")
                        .HasDatabaseName("ix_slag_field_states_bucket_id");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_slag_field_states_material_id");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("ix_slag_field_states_place_id");

                    b.ToTable("SlagFieldStates", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.HasKey("Id")
                        .HasName("pk_buckets");

                    b.ToTable("Buckets", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_materials");

                    b.ToTable("Materials", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.MaterialSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("event_type");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<decimal?>("MaxHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("max_hours");

                    b.Property<decimal?>("MinHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("min_hours");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("stage_name");

                    b.Property<string>("VisualStateCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("visual_state_code");

                    b.HasKey("Id")
                        .HasName("pk_material_settings");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_material_settings_material_id");

                    b.ToTable("MaterialSettings", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.SlagFieldStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<Guid?>("SlagFieldStateId")
                        .HasColumnType("uuid")
                        .HasColumnName("slag_field_state_id");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("total");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transaction_type");

                    b.HasKey("Id")
                        .HasName("pk_slag_field_stocks");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_slag_field_stocks_material_id");

                    b.HasIndex("SlagFieldStateId")
                        .IsUnique()
                        .HasDatabaseName("ix_slag_field_stocks_slag_field_state_id");

                    b.ToTable("SlagFieldStocks", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_name");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Infrastructure.EventStores.SlagFieldPlaceEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_data");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_type");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("EventId")
                        .HasName("pk_slag_field_place_event_store");

                    b.HasIndex("AggregateId")
                        .HasDatabaseName("ix_slag_field_place_event_store_aggregate_id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_slag_field_place_event_store_timestamp");

                    b.ToTable("SlagFieldPlaceEventStore", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Infrastructure.EventStores.SlagFieldStateEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_data");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_type");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("EventId")
                        .HasName("pk_slag_field_state_event_store");

                    b.HasIndex("AggregateId")
                        .HasDatabaseName("ix_slag_field_state_event_store_aggregate_id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_slag_field_state_event_store_timestamp");

                    b.ToTable("SlagFieldStateEventStore", (string)null);
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Aggregates.SlagFieldState.SlagFieldState", b =>
                {
                    b.HasOne("SlagFieldManagement.Domain.Entities.Bucket", null)
                        .WithMany()
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_slag_field_states_buckets_bucket_id");

                    b.HasOne("SlagFieldManagement.Domain.Entities.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_slag_field_states_materials_material_id");

                    b.HasOne("SlagFieldManagement.Domain.Aggregates.SlagFieldPlace.SlagFieldPlace", null)
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_slag_field_states_slag_field_places_place_id");
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.MaterialSettings", b =>
                {
                    b.HasOne("SlagFieldManagement.Domain.Entities.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_material_settings_materials_material_id");
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.SlagFieldStock", b =>
                {
                    b.HasOne("SlagFieldManagement.Domain.Entities.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_slag_field_stocks_materials_material_id");

                    b.HasOne("SlagFieldManagement.Domain.Aggregates.SlagFieldState.SlagFieldState", null)
                        .WithOne()
                        .HasForeignKey("SlagFieldManagement.Domain.Entities.SlagFieldStock", "SlagFieldStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_slag_field_stocks_slag_field_states_slag_field_state_id");
                });

            modelBuilder.Entity("SlagFieldManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("SlagFieldManagement.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SlagFieldManagement.Infrastructure.EventStores.SlagFieldPlaceEvent", b =>
                {
                    b.HasOne("SlagFieldManagement.Domain.Aggregates.SlagFieldPlace.SlagFieldPlace", null)
                        .WithMany()
                        .HasForeignKey("AggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_slag_field_place_event_store_slag_field_places_aggregate_id");
                });

            modelBuilder.Entity("SlagFieldManagement.Infrastructure.EventStores.SlagFieldStateEvent", b =>
                {
                    b.HasOne("SlagFieldManagement.Domain.Aggregates.SlagFieldState.SlagFieldState", null)
                        .WithMany()
                        .HasForeignKey("AggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_slag_field_state_event_store_slag_field_states_aggregate_id");
                });
#pragma warning restore 612, 618
        }
    }
}
